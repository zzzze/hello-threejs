webpackJsonp([0],[
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderer = exports.scene = exports.height = exports.width = undefined;\n\nvar _three = __webpack_require__(0);\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar width = exports.width = document.getElementById('canvas-frame').clientWidth;\nvar height = exports.height = document.getElementById('canvas-frame').clientHeight;\nvar scene = exports.scene = new THREE.Scene();\n\nfunction initThree() {\n  var renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setSize(width, height);\n  renderer.setClearColor(0xFFFFFF, 1.0);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  document.getElementById('canvas-frame').appendChild(renderer.domElement);\n  return renderer;\n}\n\nvar renderer = exports.renderer = initThree();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvaW5pdC5qcz9mMmQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJ1xuXG5leHBvcnQgY29uc3Qgd2lkdGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzLWZyYW1lJykuY2xpZW50V2lkdGhcbmV4cG9ydCBjb25zdCBoZWlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzLWZyYW1lJykuY2xpZW50SGVpZ2h0XG5leHBvcnQgY29uc3Qgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKVxuXG5mdW5jdGlvbiBpbml0VGhyZWUgKCkge1xuICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcbiAgICBhbnRpYWxpYXM6IHRydWVcbiAgfSlcbiAgcmVuZGVyZXIuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KVxuICByZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4RkZGRkZGLCAxLjApXG4gIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMtZnJhbWUnKS5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KVxuICByZXR1cm4gcmVuZGVyZXJcbn1cblxuZXhwb3J0IGNvbnN0IHJlbmRlcmVyID0gaW5pdFRocmVlKClcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvaW5pdC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFEQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _three = __webpack_require__(0);\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _init = __webpack_require__(1);\n\nvar _line = __webpack_require__(3);\n\nvar _line2 = _interopRequireDefault(_line);\n\nvar _light = __webpack_require__(4);\n\nvar _light2 = _interopRequireDefault(_light);\n\nvar _camera = __webpack_require__(5);\n\nvar _camera2 = _interopRequireDefault(_camera);\n\nvar _cube = __webpack_require__(6);\n\nvar _cube2 = _interopRequireDefault(_cube);\n\nvar _bunny = __webpack_require__(8);\n\nvar _bunny2 = _interopRequireDefault(_bunny);\n\nvar _VTKLoader = __webpack_require__(9);\n\nvar _VTKLoader2 = _interopRequireDefault(_VTKLoader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction run() {\n  console.log(_bunny2.default);\n  var loader = new _VTKLoader2.default();\n  loader.addEventListener('load', function (geometry) {\n    // const geometry = event.content\n    var material = new THREE.MeshLambertMaterial({ color: 0xffffff, side: THREE.DoubleSide });\n    var mesh = new THREE.Mesh(geometry, material);\n    mesh.position.setY(-0.09);\n    _init.scene.add(mesh);\n  });\n  loader.load(_bunny2.default);\n\n  _init.scene.add(_light2.default);\n  // scene.add(cube)\n  _init.scene.add(_line2.default);\n  animate();\n}\n\nfunction animate() {\n  // requestAnimationFrame(animate)\n  render();\n}\n\nfunction render() {\n  _cube2.default.rotation.y += 0.02;\n  _cube2.default.rotation.z += 0.01;\n\n  _init.renderer.clear();\n  _init.renderer.render(_init.scene, _camera2.default);\n}\n\nwindow.addEventListener('load', run);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvaW5kZXguanM/MWZkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSdcbmltcG9ydCB7IHNjZW5lLCByZW5kZXJlciB9IGZyb20gJy4vaW5pdCdcbmltcG9ydCBsaW5lIGZyb20gJy4vbGluZSdcbmltcG9ydCBsaWdodCBmcm9tICcuL2xpZ2h0J1xuaW1wb3J0IGNhbWVyYSBmcm9tICcuL2NhbWVyYSdcbmltcG9ydCBjdWJlIGZyb20gJy4vY3ViZSdcbmltcG9ydCBidW5ueSBmcm9tICcuLi9yZXMvbW9kZWxzL2J1bm55LnZ0aydcbmltcG9ydCBWVEtMb2FkZXIgZnJvbSAnLi9sb2FkZXJzL1ZUS0xvYWRlcidcblxuZnVuY3Rpb24gcnVuICgpIHtcbiAgY29uc29sZS5sb2coYnVubnkpXG4gIGNvbnN0IGxvYWRlciA9IG5ldyBWVEtMb2FkZXIoKVxuICBsb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uIChnZW9tZXRyeSkge1xuICAgIC8vIGNvbnN0IGdlb21ldHJ5ID0gZXZlbnQuY29udGVudFxuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogMHhmZmZmZmYsIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUgfSlcbiAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKVxuICAgIG1lc2gucG9zaXRpb24uc2V0WSgtMC4wOSlcbiAgICBzY2VuZS5hZGQobWVzaClcbiAgfSlcbiAgbG9hZGVyLmxvYWQoYnVubnkpXG5cbiAgc2NlbmUuYWRkKGxpZ2h0KVxuICAvLyBzY2VuZS5hZGQoY3ViZSlcbiAgc2NlbmUuYWRkKGxpbmUpXG4gIGFuaW1hdGUoKVxufVxuXG5mdW5jdGlvbiBhbmltYXRlICgpIHtcbiAgLy8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpXG4gIHJlbmRlcigpXG59XG5cbmZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gIGN1YmUucm90YXRpb24ueSArPSAwLjAyXG4gIGN1YmUucm90YXRpb24ueiArPSAwLjAxXG5cbiAgcmVuZGVyZXIuY2xlYXIoKVxuICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSlcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBydW4pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2luZGV4LmpzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _three = __webpack_require__(0);\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction initObject() {\n  var geometry = new THREE.Geometry();\n  var material = new THREE.LineBasicMaterial({ vertexColors: true });\n  var color1 = new THREE.Color(0x00FF00);\n  var color2 = new THREE.Color(0xFF0000);\n\n  // 线的材质可以由2点的颜色决定\n  geometry.vertices.push(new THREE.Vector3(-500, 0, 0));\n  geometry.vertices.push(new THREE.Vector3(500, 0, 0));\n  geometry.colors.push(color1, color2);\n\n  return new THREE.Line(geometry, material, THREE.LineSegments);\n}\n\nexports.default = initObject();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvbGluZS5qcz8yYTNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJ1xuXG5mdW5jdGlvbiBpbml0T2JqZWN0ICgpIHtcbiAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKVxuICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7IHZlcnRleENvbG9yczogdHJ1ZSB9KVxuICBjb25zdCBjb2xvcjEgPSBuZXcgVEhSRUUuQ29sb3IoMHgwMEZGMDApXG4gIGNvbnN0IGNvbG9yMiA9IG5ldyBUSFJFRS5Db2xvcigweEZGMDAwMClcblxuICAvLyDnur/nmoTmnZDotKjlj6/ku6XnlLEy54K555qE6aKc6Imy5Yaz5a6aXG4gIGdlb21ldHJ5LnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoLTUwMCwgMCwgMCkpXG4gIGdlb21ldHJ5LnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoNTAwLCAwLCAwKSlcbiAgZ2VvbWV0cnkuY29sb3JzLnB1c2goY29sb3IxLCBjb2xvcjIpXG5cbiAgcmV0dXJuIG5ldyBUSFJFRS5MaW5lKGdlb21ldHJ5LCBtYXRlcmlhbCwgVEhSRUUuTGluZVNlZ21lbnRzKVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0T2JqZWN0KClcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvbGluZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQURBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _three = __webpack_require__(0);\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction initLight() {\n  var light = new THREE.DirectionalLight(0xFF0000, 1.0);\n  light.position.set(100, 100, 200);\n  return light;\n}\n\nexports.default = initLight();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvbGlnaHQuanM/N2EzYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSdcblxuZnVuY3Rpb24gaW5pdExpZ2h0ICgpIHtcbiAgY29uc3QgbGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweEZGMDAwMCwgMS4wKVxuICBsaWdodC5wb3NpdGlvbi5zZXQoMTAwLCAxMDAsIDIwMClcbiAgcmV0dXJuIGxpZ2h0XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRMaWdodCgpXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2xpZ2h0LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBREE7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _three = __webpack_require__(0);\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _init = __webpack_require__(1);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction initCamera() {\n  var camera = new THREE.PerspectiveCamera(35, _init.width / _init.height, 1, 10000);\n  camera.position.x = 0;\n  camera.position.y = 0;\n  camera.position.z = 1000;\n  camera.up.x = 0;\n  camera.up.y = 1;\n  camera.up.z = 0;\n  camera.lookAt(0, 0, 0);\n\n  return camera;\n}\n\nexports.default = initCamera();\n\n// export default new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvY2FtZXJhLmpzP2FmMTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnXG5pbXBvcnQgeyB3aWR0aCwgaGVpZ2h0IH0gZnJvbSAnLi9pbml0J1xuXG5mdW5jdGlvbiBpbml0Q2FtZXJhICgpIHtcbiAgY29uc3QgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDM1LCB3aWR0aCAvIGhlaWdodCwgMSwgMTAwMDApXG4gIGNhbWVyYS5wb3NpdGlvbi54ID0gMFxuICBjYW1lcmEucG9zaXRpb24ueSA9IDBcbiAgY2FtZXJhLnBvc2l0aW9uLnogPSAxMDAwXG4gIGNhbWVyYS51cC54ID0gMFxuICBjYW1lcmEudXAueSA9IDFcbiAgY2FtZXJhLnVwLnogPSAwXG4gIGNhbWVyYS5sb29rQXQoMCwgMCwgMClcblxuICByZXR1cm4gY2FtZXJhXG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDYW1lcmEoKVxuXG4vLyBleHBvcnQgZGVmYXVsdCBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNzUsIHdpZHRoIC8gaGVpZ2h0LCAwLjEsIDEwMDApXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NhbWVyYS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _three = __webpack_require__(0);\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _crate = __webpack_require__(7);\n\nvar _crate2 = _interopRequireDefault(_crate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n// const geometry = new THREE.BoxGeometry(200, 200, 200)\n// for (let i = 0; i < geometry.faces.length; i += 2) {\n//   const hex = Math.random() * 0xffffff\n//   // const hex = 0xffffff\n//   geometry.faces[ i ].color.setHex(hex)\n//   geometry.faces[ i + 1 ].color.setHex(hex)\n// }\n// var material = new THREE.MeshBasicMaterial({color: 0xFFFFFF})\n\nvar geometry = new THREE.CubeGeometry(200, 200, 200, 4, 4);\n// const material = new THREE.MeshLambertMaterial({color: 0xFFFFFF})\nvar texture = new THREE.TextureLoader().load(_crate2.default);\nvar material = new THREE.MeshBasicMaterial({ map: texture });\nvar mesh = new THREE.Mesh(geometry, material);\nmesh.position.set(0, 0, 0);\n\nvar cube = new THREE.Mesh(geometry, material);\ncube.rotation.y = Math.PI / 4;\ncube.rotation.x = Math.PI / 8;\n\nexports.default = cube;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvY3ViZS5qcz8wZTA5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJ1xuaW1wb3J0IGNyYXRlVGV4dHVyZSBmcm9tICcuLi9yZXMvdGV4dHVyZXMvY3JhdGUuZ2lmJ1xuXG4vLyBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgyMDAsIDIwMCwgMjAwKVxuLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBnZW9tZXRyeS5mYWNlcy5sZW5ndGg7IGkgKz0gMikge1xuLy8gICBjb25zdCBoZXggPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZcbi8vICAgLy8gY29uc3QgaGV4ID0gMHhmZmZmZmZcbi8vICAgZ2VvbWV0cnkuZmFjZXNbIGkgXS5jb2xvci5zZXRIZXgoaGV4KVxuLy8gICBnZW9tZXRyeS5mYWNlc1sgaSArIDEgXS5jb2xvci5zZXRIZXgoaGV4KVxuLy8gfVxuLy8gdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjogMHhGRkZGRkZ9KVxuXG5jb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5DdWJlR2VvbWV0cnkoMjAwLCAyMDAsIDIwMCwgNCwgNClcbi8vIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe2NvbG9yOiAweEZGRkZGRn0pXG52YXIgdGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZChjcmF0ZVRleHR1cmUpXG52YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBtYXA6IHRleHR1cmUgfSlcbmNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpXG5tZXNoLnBvc2l0aW9uLnNldCgwLCAwLCAwKVxuXG5jb25zdCBjdWJlID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKVxuY3ViZS5yb3RhdGlvbi55ID0gTWF0aC5QSSAvIDRcbmN1YmUucm90YXRpb24ueCA9IE1hdGguUEkgLyA4XG5cbmV4cG9ydCBkZWZhdWx0IGN1YmVcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvY3ViZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBOzs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"da499b8537ee3ce0ed8469c0a73ecc2c.gif\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9yZXMvdGV4dHVyZXMvY3JhdGUuZ2lmP2VkOTMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGE0OTliODUzN2VlM2NlMGVkODQ2OWMwYTczZWNjMmMuZ2lmXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vcmVzL3RleHR1cmVzL2NyYXRlLmdpZlxuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"4de0b82bbd07d5d1d1cd2147b77380a2.vtk\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9yZXMvbW9kZWxzL2J1bm55LnZ0az85ZWE1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjRkZTBiODJiYmQwN2Q1ZDFkMWNkMjE0N2I3NzM4MGEyLnZ0a1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL3Jlcy9tb2RlbHMvYnVubnkudnRrXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = VTKLoader;\n\nvar _three = __webpack_require__(0);\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction VTKLoader(manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n} /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author Alex Pletzer\n   *\n   * Updated on 22.03.2017\n   * VTK header is now parsed and used to extract all the compressed data\n   * @author Andrii Iudin https://github.com/andreyyudin\n   * @author Paul Kibet Korir https://github.com/polarise\n   * @author Sriram Somasundharam https://github.com/raamssundar\n   */\n\n\nObject.assign(VTKLoader.prototype, THREE.EventDispatcher.prototype, {\n\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n\n    var loader = new THREE.FileLoader(scope.manager);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (text) {\n      onLoad(scope.parse(text));\n    }, onProgress, onError);\n  },\n\n  parse: function parse(data) {\n    function parseASCII(data) {\n      // connectivity of the triangles\n      var indices = [];\n\n      // triangles vertices\n      var positions = [];\n\n      // red, green, blue colors in the range 0 to 1\n      var colors = [];\n\n      // normal vector, one per vertex\n      var normals = [];\n\n      var result;\n\n      // pattern for reading vertices, 3 floats or integers\n      var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n\n      // pattern for connectivity, an integer followed by any number of ints\n      // the first integer is the number of polygon nodes\n      var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n\n      // indicates start of vertex data section\n      var patPOINTS = /^POINTS /;\n\n      // indicates start of polygon connectivity section\n      var patPOLYGONS = /^POLYGONS /;\n\n      // indicates start of triangle strips section\n      var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n\n      // POINT_DATA number_of_values\n      var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n\n      // CELL_DATA number_of_polys\n      var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n\n      // Start of color section\n      var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n\n      // NORMALS Normals float\n      var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n\n      var inPointsSection = false;\n      var inPolygonsSection = false;\n      var inTriangleStripSection = false;\n      var inPointDataSection = false;\n      var inCellDataSection = false;\n      var inColorSection = false;\n      var inNormalsSection = false;\n\n      var lines = data.split('\\n');\n\n      for (var i in lines) {\n        var line = lines[i];\n\n        if (inPointsSection) {\n          // get the vertices\n          while ((result = pat3Floats.exec(line)) !== null) {\n            var x = parseFloat(result[1]);\n            var y = parseFloat(result[2]);\n            var z = parseFloat(result[3]);\n            positions.push(x, y, z);\n          }\n        } else if (inPolygonsSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            // numVertices i0 i1 i2 ...\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n\n            if (numVertices >= 3) {\n              var i0 = parseInt(inds[0]);\n              var i1, i2;\n              var k = 1;\n              // split the polygon in numVertices - 2 triangles\n              for (var j = 0; j < numVertices - 2; ++j) {\n                i1 = parseInt(inds[k]);\n                i2 = parseInt(inds[k + 1]);\n                indices.push(i0, i1, i2);\n                k++;\n              }\n            }\n          }\n        } else if (inTriangleStripSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            // numVertices i0 i1 i2 ...\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n\n            if (numVertices >= 3) {\n              var i0, i1, i2;\n              // split the polygon in numVertices - 2 triangles\n              for (var j = 0; j < numVertices - 2; j++) {\n                if (j % 2 === 1) {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 2]);\n                  i2 = parseInt(inds[j + 1]);\n                  indices.push(i0, i1, i2);\n                } else {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 1]);\n                  i2 = parseInt(inds[j + 2]);\n                  indices.push(i0, i1, i2);\n                }\n              }\n            }\n          }\n        } else if (inPointDataSection || inCellDataSection) {\n          if (inColorSection) {\n            // Get the colors\n\n            while ((result = pat3Floats.exec(line)) !== null) {\n              var r = parseFloat(result[1]);\n              var g = parseFloat(result[2]);\n              var b = parseFloat(result[3]);\n              colors.push(r, g, b);\n            }\n          } else if (inNormalsSection) {\n            // Get the normal vectors\n\n            while ((result = pat3Floats.exec(line)) !== null) {\n              var nx = parseFloat(result[1]);\n              var ny = parseFloat(result[2]);\n              var nz = parseFloat(result[3]);\n              normals.push(nx, ny, nz);\n            }\n          }\n        }\n\n        if (patPOLYGONS.exec(line) !== null) {\n          inPolygonsSection = true;\n          inPointsSection = false;\n          inTriangleStripSection = false;\n        } else if (patPOINTS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = true;\n          inTriangleStripSection = false;\n        } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = false;\n          inTriangleStripSection = true;\n        } else if (patPOINT_DATA.exec(line) !== null) {\n          inPointDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCELL_DATA.exec(line) !== null) {\n          inCellDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCOLOR_SCALARS.exec(line) !== null) {\n          inColorSection = true;\n          inNormalsSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patNORMALS.exec(line) !== null) {\n          inNormalsSection = true;\n          inColorSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        }\n      }\n\n      var geometry;\n      var stagger = 'point';\n\n      if (colors.length === indices.length) {\n        stagger = 'cell';\n      }\n\n      if (stagger === 'point') {\n        // Nodal. Use BufferGeometry\n        geometry = new THREE.BufferGeometry();\n        geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n        geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\n\n        if (colors.length === positions.length) {\n          geometry.addAttribute('color', new THREE.BufferAttribute(new Float32Array(colors), 3));\n        }\n\n        if (normals.length === positions.length) {\n          geometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(normals), 3));\n        }\n      } else {\n        // Cell centered colors. The only way to attach a solid color to each triangle\n        // is to use Geometry, which is less efficient than BufferGeometry\n        geometry = new THREE.Geometry();\n\n        var numTriangles = indices.length / 3;\n        var numPoints = positions.length / 3;\n        var face;\n        var ia, ib, ic;\n        var x, y, z;\n        var r, g, b;\n\n        for (var j = 0; j < numPoints; ++j) {\n          x = positions[3 * j + 0];\n          y = positions[3 * j + 1];\n          z = positions[3 * j + 2];\n          geometry.vertices.push(new THREE.Vector3(x, y, z));\n        }\n\n        for (var i = 0; i < numTriangles; ++i) {\n          ia = indices[3 * i + 0];\n          ib = indices[3 * i + 1];\n          ic = indices[3 * i + 2];\n          geometry.faces.push(new THREE.Face3(ia, ib, ic));\n        }\n\n        if (colors.length === numTriangles * 3) {\n          for (var i = 0; i < numTriangles; ++i) {\n            face = geometry.faces[i];\n            r = colors[3 * i + 0];\n            g = colors[3 * i + 1];\n            b = colors[3 * i + 2];\n            face.color = new THREE.Color().setRGB(r, g, b);\n          }\n        }\n      }\n\n      return geometry;\n    }\n\n    function parseBinary(data) {\n      var count, pointIndex, i, numberOfPoints, s;\n      var buffer = new Uint8Array(data);\n      var dataView = new DataView(data);\n\n      // Points and normals, by default, are empty\n      var points = [];\n      var normals = [];\n      var indices = [];\n\n      // Going to make a big array of strings\n      var vtk = [];\n      var index = 0;\n\n      function findString(buffer, start) {\n        var index = start;\n        var c = buffer[index];\n        var s = [];\n        while (c !== 10) {\n          s.push(String.fromCharCode(c));\n          index++;\n          c = buffer[index];\n        }\n\n        return { start: start,\n          end: index,\n          next: index + 1,\n          parsedString: s.join('') };\n      }\n\n      var state, line;\n\n      while (true) {\n        // Get a string\n        state = findString(buffer, index);\n        line = state.parsedString;\n\n        if (line.indexOf('POINTS') === 0) {\n          vtk.push(line);\n          // Add the points\n          numberOfPoints = parseInt(line.split(' ')[1], 10);\n\n          // Each point is 3 4-byte floats\n          count = numberOfPoints * 4 * 3;\n\n          points = new Float32Array(numberOfPoints * 3);\n\n          pointIndex = state.next;\n          for (i = 0; i < numberOfPoints; i++) {\n            points[3 * i] = dataView.getFloat32(pointIndex, false);\n            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex = pointIndex + 12;\n          }\n          // increment our next pointer\n          state.next = state.next + count + 1;\n        } else if (line.indexOf('TRIANGLE_STRIPS') === 0) {\n          var numberOfStrips = parseInt(line.split(' ')[1], 10);\n          var size = parseInt(line.split(' ')[2], 10);\n          // 4 byte integers\n          count = size * 4;\n\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n\n          pointIndex = state.next;\n          for (i = 0; i < numberOfStrips; i++) {\n            // For each strip, read the first value, then record that many more points\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            }\n\n            // retrieves the n-2 triangles from the triangle strip\n            for (var j = 0; j < indexCount - 2; j++) {\n              if (j % 2) {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 2];\n                indices[indicesIndex++] = strip[j + 1];\n              } else {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 1];\n                indices[indicesIndex++] = strip[j + 2];\n              }\n            }\n          }\n          // increment our next pointer\n          state.next = state.next + count + 1;\n        } else if (line.indexOf('POLYGONS') === 0) {\n          var numberOfStrips = parseInt(line.split(' ')[1], 10);\n          var size = parseInt(line.split(' ')[2], 10);\n          // 4 byte integers\n          count = size * 4;\n\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n\n          pointIndex = state.next;\n          for (i = 0; i < numberOfStrips; i++) {\n            // For each strip, read the first value, then record that many more points\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            }\n\n            // divide the polygon in n-2 triangle\n            for (var j = 1; j < indexCount - 1; j++) {\n              indices[indicesIndex++] = strip[0];\n              indices[indicesIndex++] = strip[j];\n              indices[indicesIndex++] = strip[j + 1];\n            }\n          }\n          // increment our next pointer\n          state.next = state.next + count + 1;\n        } else if (line.indexOf('POINT_DATA') === 0) {\n          numberOfPoints = parseInt(line.split(' ')[1], 10);\n\n          // Grab the next line\n          state = findString(buffer, state.next);\n\n          // Now grab the binary data\n          count = numberOfPoints * 4 * 3;\n\n          normals = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n          for (i = 0; i < numberOfPoints; i++) {\n            normals[3 * i] = dataView.getFloat32(pointIndex, false);\n            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex += 12;\n          }\n\n          // Increment past our data\n          state.next = state.next + count;\n        }\n\n        // Increment index\n        index = state.next;\n\n        if (index >= buffer.byteLength) {\n          break;\n        }\n      }\n\n      var geometry = new THREE.BufferGeometry();\n      geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n      geometry.addAttribute('position', new THREE.BufferAttribute(points, 3));\n\n      if (normals.length === points.length) {\n        geometry.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n      }\n\n      return geometry;\n    }\n\n    function Float32Concat(first, second) {\n      var firstLength = first.length,\n          result = new Float32Array(firstLength + second.length);\n\n      result.set(first);\n      result.set(second, firstLength);\n\n      return result;\n    }\n\n    function Int32Concat(first, second) {\n      var firstLength = first.length,\n          result = new Int32Array(firstLength + second.length);\n\n      result.set(first);\n      result.set(second, firstLength);\n\n      return result;\n    }\n\n    function parseXML(stringFile) {\n      // Changes XML to JSON, based on https://davidwalsh.name/convert-xml-json\n\n      function xmlToJson(xml) {\n        // Create the return object\n        var obj = {};\n\n        if (xml.nodeType === 1) {\n          // element\n          // do attributes\n\n          if (xml.attributes) {\n            if (xml.attributes.length > 0) {\n              obj['attributes'] = {};\n\n              for (var j = 0; j < xml.attributes.length; j++) {\n                var attribute = xml.attributes.item(j);\n                obj['attributes'][attribute.nodeName] = attribute.nodeValue.trim();\n              }\n            }\n          }\n        } else if (xml.nodeType === 3) {\n          // text\n          obj = xml.nodeValue.trim();\n        }\n\n        // do children\n        if (xml.hasChildNodes()) {\n          for (var i = 0; i < xml.childNodes.length; i++) {\n            var item = xml.childNodes.item(i);\n            var nodeName = item.nodeName;\n\n            if (typeof obj[nodeName] === 'undefined') {\n              var tmp = xmlToJson(item);\n\n              if (tmp !== '') obj[nodeName] = tmp;\n            } else {\n              if (typeof obj[nodeName].push === 'undefined') {\n                var old = obj[nodeName];\n                obj[nodeName] = [old];\n              }\n\n              var tmp = xmlToJson(item);\n\n              if (tmp !== '') obj[nodeName].push(tmp);\n            }\n          }\n        }\n\n        return obj;\n      }\n\n      // Taken from Base64-js\n      function Base64toByteArray(b64) {\n        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n        var i;\n        var lookup = [];\n        var revLookup = [];\n        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n        var len = code.length;\n\n        for (i = 0; i < len; i++) {\n          lookup[i] = code[i];\n        }\n\n        for (i = 0; i < len; ++i) {\n          revLookup[code.charCodeAt(i)] = i;\n        }\n\n        revLookup['-'.charCodeAt(0)] = 62;\n        revLookup['_'.charCodeAt(0)] = 63;\n\n        var j, l, tmp, placeHolders, arr;\n        var len = b64.length;\n\n        if (len % 4 > 0) {\n          throw new Error('Invalid string. Length must be a multiple of 4');\n        }\n\n        placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n        arr = new Arr(len * 3 / 4 - placeHolders);\n        l = placeHolders > 0 ? len - 4 : len;\n\n        var L = 0;\n\n        for (i = 0, j = 0; i < l; i += 4, j += 3) {\n          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n          arr[L++] = (tmp & 0xFF0000) >> 16;\n          arr[L++] = (tmp & 0xFF00) >> 8;\n          arr[L++] = tmp & 0xFF;\n        }\n\n        if (placeHolders === 2) {\n          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n          arr[L++] = tmp & 0xFF;\n        } else if (placeHolders === 1) {\n          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n          arr[L++] = tmp >> 8 & 0xFF;\n          arr[L++] = tmp & 0xFF;\n        }\n\n        return arr;\n      }\n\n      function parseDataArray(ele, compressed) {\n        var numBytes = 0;\n\n        if (json.attributes.header_type === 'UInt64') {\n          numBytes = 8;\n        } else if (json.attributes.header_type === 'UInt32') {\n          numBytes = 4;\n        }\n\n        // Check the format\n        if (ele.attributes.format === 'binary' && compressed) {\n          var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n\n          if (ele.attributes.type === 'Float32') {\n            var txt = new Float32Array();\n          } else if (ele.attributes.type === 'Int64') {\n            var txt = new Int32Array();\n          }\n\n          // VTP data with the header has the following structure:\n          // [#blocks][#u-size][#p-size][#c-size-1][#c-size-2]...[#c-size-#blocks][DATA]\n          //\n          // Each token is an integer value whose type is specified by \"header_type\" at the top of the file (UInt32 if no type specified). The token meanings are:\n          // [#blocks] = Number of blocks\n          // [#u-size] = Block size before compression\n          // [#p-size] = Size of last partial block (zero if it not needed)\n          // [#c-size-i] = Size in bytes of block i after compression\n          //\n          // The [DATA] portion stores contiguously every block appended together. The offset from the beginning of the data section to the beginning of a block is\n          // computed by summing the compressed block sizes from preceding blocks according to the header.\n\n          rawData = ele['#text'];\n\n          byteData = Base64toByteArray(rawData);\n\n          blocks = byteData[0];\n          for (var i = 1; i < numBytes - 1; i++) {\n            blocks = blocks | byteData[i] << i * numBytes;\n          }\n\n          headerSize = (blocks + 3) * numBytes;\n          padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n          headerSize = headerSize + padding;\n\n          dataOffsets = [];\n          currentOffset = headerSize;\n          dataOffsets.push(currentOffset);\n\n          // Get the blocks sizes after the compression.\n          // There are three blocks before c-size-i, so we skip 3*numBytes\n          cSizeStart = 3 * numBytes;\n\n          for (var i = 0; i < blocks; i++) {\n            var currentBlockSize = byteData[i * numBytes + cSizeStart];\n\n            for (var j = 1; j < numBytes - 1; j++) {\n              // Each data point consists of 8 bytes regardless of the header type\n              currentBlockSize = currentBlockSize | byteData[i * numBytes + cSizeStart + j] << j * 8;\n            }\n\n            currentOffset = currentOffset + currentBlockSize;\n            dataOffsets.push(currentOffset);\n          }\n\n          for (var i = 0; i < dataOffsets.length - 1; i++) {\n            var inflate = new Zlib.Inflate(byteData.slice(dataOffsets[i], dataOffsets[i + 1]), { resize: true, verify: true }); // eslint-disable-line no-undef\n            content = inflate.decompress();\n            content = content.buffer;\n\n            if (ele.attributes.type === 'Float32') {\n              content = new Float32Array(content);\n              txt = Float32Concat(txt, content);\n            } else if (ele.attributes.type === 'Int64') {\n              content = new Int32Array(content);\n              txt = Int32Concat(txt, content);\n            }\n          }\n\n          delete ele['#text'];\n\n          // Get the content and optimize it\n          if (ele.attributes.type === 'Float32') {\n            if (ele.attributes.format === 'binary') {\n              if (!compressed) {\n                txt = txt.filter(function (el, idx) {\n                  if (idx !== 0) return true;\n                });\n              }\n            }\n          } else if (ele.attributes.type === 'Int64') {\n            if (ele.attributes.format === 'binary') {\n              if (!compressed) {\n                txt = txt.filter(function (el, idx) {\n                  if (idx !== 0) return true;\n                });\n              }\n\n              txt = txt.filter(function (el, idx) {\n                if (idx % 2 !== 1) return true;\n              });\n            }\n          }\n        } else {\n          if (ele.attributes.format === 'binary' && !compressed) {\n            var content = Base64toByteArray(ele['#text']);\n\n            //  VTP data for the uncompressed case has the following structure:\n            // [#bytes][DATA]\n            // where \"[#bytes]\" is an integer value specifying the number of bytes in the block of data following it.\n            content = content.slice(numBytes).buffer;\n          } else {\n            if (ele['#text']) {\n              var content = ele['#text'].split(/\\s+/).filter(function (el) {\n                if (el !== '') return el;\n              });\n            } else {\n              var content = new Int32Array(0).buffer;\n            }\n          }\n\n          delete ele['#text'];\n\n          // Get the content and optimize it\n          if (ele.attributes.type === 'Float32') {\n            var txt = new Float32Array(content);\n          } else if (ele.attributes.type === 'Int32') {\n            var txt = new Int32Array(content);\n          } else if (ele.attributes.type === 'Int64') {\n            var txt = new Int32Array(content);\n\n            if (ele.attributes.format === 'binary') {\n              txt = txt.filter(function (el, idx) {\n                if (idx % 2 !== 1) return true;\n              });\n            }\n          }\n        } // endif ( ele.attributes.format === 'binary' && compressed )\n\n        return txt;\n      }\n\n      // Main part\n      // Get Dom\n      var dom = null;\n\n      if (window.DOMParser) {\n        try {\n          dom = new DOMParser().parseFromString(stringFile, 'text/xml');\n        } catch (e) {\n          dom = null;\n        }\n      } else if (window.ActiveXObject) {\n        try {\n          dom = new ActiveXObject('Microsoft.XMLDOM'); // eslint-disable-line no-undef\n          dom.async = false;\n\n          if (!dom.loadXML()) {\n            throw new Error(dom.parseError.reason + dom.parseError.srcText);\n          }\n        } catch (e) {\n          dom = null;\n        }\n      } else {\n        throw new Error('Cannot parse xml string!');\n      }\n\n      // Get the doc\n      var doc = dom.documentElement;\n      // Convert to json\n      var json = xmlToJson(doc);\n      var points = [];\n      var normals = [];\n      var indices = [];\n\n      if (json.PolyData) {\n        var piece = json.PolyData.Piece;\n        var compressed = json.attributes.hasOwnProperty('compressor');\n\n        // Can be optimized\n        // Loop through the sections\n        var sections = ['PointData', 'Points', 'Strips', 'Polys']; // +['CellData', 'Verts', 'Lines'];\n        var sectionIndex = 0,\n            numberOfSections = sections.length;\n\n        while (sectionIndex < numberOfSections) {\n          var section = piece[sections[sectionIndex]];\n\n          // If it has a DataArray in it\n\n          if (section && section.DataArray) {\n            // Depending on the number of DataArrays\n\n            if (Object.prototype.toString.call(section.DataArray) === '[object Array]') {\n              var arr = section.DataArray;\n            } else {\n              var arr = [section.DataArray];\n            }\n\n            var dataArrayIndex = 0,\n                numberOfDataArrays = arr.length;\n\n            while (dataArrayIndex < numberOfDataArrays) {\n              // Parse the DataArray\n              if ('#text' in arr[dataArrayIndex] && arr[dataArrayIndex]['#text'].length > 0) {\n                arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n              }\n\n              dataArrayIndex++;\n            }\n\n            switch (sections[sectionIndex]) {\n              // if iti is point data\n              case 'PointData':\n\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                var normalsName = section.attributes.Normals;\n\n                if (numberOfPoints > 0) {\n                  for (var i = 0, len = arr.length; i < len; i++) {\n                    if (normalsName === arr[i].attributes.Name) {\n                      var components = arr[i].attributes.NumberOfComponents;\n                      normals = new Float32Array(numberOfPoints * components);\n                      normals.set(arr[i].text, 0);\n                    }\n                  }\n                }\n\n                break;\n\n              // if it is points\n              case 'Points':\n\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n\n                if (numberOfPoints > 0) {\n                  var components = section.DataArray.attributes.NumberOfComponents;\n                  points = new Float32Array(numberOfPoints * components);\n                  points.set(section.DataArray.text, 0);\n                }\n\n                break;\n\n              // if it is strips\n              case 'Strips':\n\n                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n\n                if (numberOfStrips > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n\n                  var size = numberOfStrips + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n\n                  var indicesIndex = 0;\n\n                  for (var i = 0, len = numberOfStrips; i < len; i++) {\n                    var strip = [];\n\n                    for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                      strip.push(connectivity[s]);\n\n                      if (i > 0) len0 = offset[i - 1];\n                    }\n\n                    for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                      if (j % 2) {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 2];\n                        indices[indicesIndex++] = strip[j + 1];\n                      } else {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 1];\n                        indices[indicesIndex++] = strip[j + 2];\n                      }\n\n                      if (i > 0) len0 = offset[i - 1];\n                    }\n                  }\n                }\n\n                break;\n\n              // if it is polys\n              case 'Polys':\n\n                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n\n                if (numberOfPolys > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n\n                  var size = numberOfPolys + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                  var indicesIndex = 0,\n                      connectivityIndex = 0;\n                  var i = 0,\n                      len = numberOfPolys,\n                      len0 = 0;\n\n                  while (i < len) {\n                    var poly = [];\n                    var s = 0,\n                        len1 = offset[i];\n\n                    while (s < len1 - len0) {\n                      poly.push(connectivity[connectivityIndex++]);\n                      s++;\n                    }\n\n                    var j = 1;\n\n                    while (j < len1 - len0 - 1) {\n                      indices[indicesIndex++] = poly[0];\n                      indices[indicesIndex++] = poly[j];\n                      indices[indicesIndex++] = poly[j + 1];\n                      j++;\n                    }\n\n                    i++;\n                    len0 = offset[i - 1];\n                  }\n                }\n\n                break;\n\n              default:\n                break;\n            }\n          }\n\n          sectionIndex++;\n        }\n\n        var geometry = new THREE.BufferGeometry();\n        geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n        geometry.addAttribute('position', new THREE.BufferAttribute(points, 3));\n\n        if (normals.length === points.length) {\n          geometry.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n        }\n\n        return geometry;\n      } else {\n\n        // TODO for vtu,vti,and other xml formats\n\n      }\n    }\n\n    function getStringFile(data) {\n      var stringFile = '';\n      var charArray = new Uint8Array(data);\n      var i = 0;\n      var len = charArray.length;\n\n      while (len--) {\n        stringFile += String.fromCharCode(charArray[i++]);\n      }\n\n      return stringFile;\n    }\n\n    // get the 5 first lines of the files to check if there is the key word binary\n    console.log(data);\n    var meta = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split('\\n');\n    console.log(meta);\n\n    if (meta[0].indexOf('xml') !== -1) {\n      return parseXML(getStringFile(data));\n    } else if (meta[2].includes('ASCII')) {\n      return parseASCII(getStringFile(data));\n    } else {\n      return parseBinary(data);\n    }\n  }\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ })
],[2]);